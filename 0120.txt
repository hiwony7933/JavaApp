**Mutual Exclusion
=>하나의 스레드가 수정 중인 공유자원을 사용이 끝나기 전에 다른 스레드가 수정하면 안된다.

1.volatile
=>변수 앞에 붙이는 예약어로 변수가 연산에 사용될 때 원자성을 보장
원자성: 작업이 완전히 끝나기 전에는 다른 작업이 끼어들 수 없다.
=>32bit 시스템에서 64bit 자료형인 long, double 을 멀티 스레드 환경에서 사용하다 보면 작업이 완료되기 전에 다른 스레드에서 사용해서 잘못된 결과를 사용할 수 있습니다.
이 경우에 volatile을 붙여주면 위와 같은 상황이 발생하지 않습니다.

2.synchronized 메소드
=>메소드 결과형 앞에 synchronized를 붙이면 메소드를 동기화해서 실행
=>이 메소드가 완료되기 전에는 다른 스레드가 수행될 수 없도록 합니다.

3.synchronized 블럭
synchronized(인스턴스){
	코드
}
=>블럭 내에서 인스턴스를 사용하는 부분만 동기화가 됩니다.
한 번에 이루어져야 하는 부분만 동기화 할 수 있습니다.

**생산자와 소비자 문제
=>공유 자원을 생성하는 스레드와 사용하는 스레드가 동시에 동작 중일 때 소비자 스레드는 생산자 스레드가 공유 자원을 생성을 해주었을 때 동작을 해야 합니다.
공유 자원을 생성하지 않은 상태에서 소비자 스레드가 동작하게 되면 예외가 발생합니다.

1.wait 메소드
=>스레드의 작업을 대기 시키는 메소드
wait(): notify()가 호출될 때 까지 대기
wait(long msec): 매개변수로 대입된 시간만큼 대기

2.notify 메소드
=>대기 중인 스레드에게 신호를 보내서 작업을 수행하도록 해주는 메소드
notify(): wait 중인 스레드 중 1개에게만 신호를 보내는 메소드
notifyAll(): wait 중인 모든 스레드에게 신호를 보내는 메소드

3.주의할 점
=>wait 와 notify 메소드는 Object 클래스의 메소드
=>wait 와 notify는 synchronized 메소드에서만 동작
메소드가 synchronized 메소드가 아니면 예외가 발생합니다.

4.실습
1)공유 자원 클래스
=>List를 인스턴스로 변수로 갖고 List에서 데이터 1개를 꺼내서 출력하는 메소드 와 List에 데이터 1개를 저장하는 메소드를 소유

//공유 자원을 소유할 클래스
public class Product {
	//공유자원 변수
	private List<Character> list;
	
	//생성자 - list를 초기화
	public Product() {
		list = new ArrayList<Character>();
	}
	
	//데이터 1개를 받아서 저장하는 메소드
	public void put(Character ch) {
		list.add(ch);
		System.out.println(ch + "가 입고 되었습니다.");
		try {
			Thread.sleep(1000);
		}catch(Exception e) {}
		System.out.println("입고 후 현재 수량:" + list.size());
	}
	
	//데이터 1개를 꺼내서 출력하는 메소드
	public void get() {
		//첫번째 데이터를 삭제하고 리턴
		Character ch = list.remove(0);
		System.out.println(ch + "가 출고 되었습니다.");
		try {
			Thread.sleep(1000);
		}catch(Exception e) {}
		System.out.println("출고 후 현재 수량:" + list.size());
	}
}

2)생산자 스레드
=>Product를 생성자의 매개변수로 받아서 스레드를 이용해서 26번 데이터를 삽입
=>Thread 클래스로부터 상속받는 Producer 클래스

public class Producer extends Thread {
	private Product product;
	
	//외부에서 인스턴스 주입받아서 객체를 생성하는 생성자
	public Producer(Product product) {
		this.product = product;
	}
	
	//스레드로 동작하는 메소드
	public void run() {
		for(char i = 'A'; i <= 'Z'; i++) {
			product.put(i);
		}
	}
}

3)소비자 스레드
=>Product를 외부에서 받아서 스레드로 26번 get 동작
=>Thread 클래스로부터 상속받는 Customer
public class Customer extends Thread {
	//공유 자원 변수
	private Product product;
	
	//외부에서 주입받는 생성자
	public Customer(Product product) {
		this.product = product;
	}
	
	public void run() {
		for(int i=0; i<26; i=i+1) {
			product.get();
		}
	}
}

4)main 메소드를 소유한 Main 클래스
public class Main {

	public static void main(String[] args) {
		//공유 자원 생성
		Product product = new Product();
		
		//Thread 클래스를 상속받은 클래스의 인스턴스를 만들고 스레드로 동작
		Customer customer = new Customer(product);
		Producer producer = new Producer(product);
		
		customer.start();
		producer.start();

	}

}

5)이 상태에서 실행하면 customer 스레드가 예외를 발생시킵니다.
product에 데이터가 없는데 읽을려고 해서 예외 발생
특정 조건을 만족하지 않으면 wait를 호출해서 대기모드로 만들고 조건이 만족되면 notify를 호출해서 wait 중인 스레드를 깨워주면 됩니다.

6)Product 클래스의 메소드를 수정
	//데이터 1개를 받아서 저장하는 메소드
	//synchronize 가 붙지 않으면 jvm이 모니터링을 하지 않기 때문에 신호를 보낼 수 없습니다.
	public synchronized void put(Character ch) {
		//2개가 넘으면 대기
		if(list.size() > 2) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		list.add(ch);
		//데이터 추가 후 신호를 보냅니다.
		notify();
		
		System.out.println(ch + "가 입고 되었습니다.");
		try {
			Thread.sleep(1000);
		}catch(Exception e) {}
		System.out.println("입고 후 현재 수량:" + list.size());
	}
	//데이터 1개를 꺼내서 출력하는 메소드
	public synchronized void get() {
		//list에 데이터가 없으면 대기
		if(list.size() == 0) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		//첫번째 데이터를 삭제하고 리턴
		Character ch = list.remove(0);
		notify();
		System.out.println(ch + "가 출고 되었습니다.");
		try {
			Thread.sleep(1000);
		}catch(Exception e) {}
		System.out.println("출고 후 현재 수량:" + list.size());
	}

**Semaphore
=>공유자원을 동시에 사용할 수 있는 스레드의 개수를 설정할 수 있는 클래스
=>이 클래스를 이용하면 동시에 수행되는 스레드의 개수를 지정 가능
1.생성자
Semaphore(int permit): 동시에 수행될 스레드 개수

2.메소드
acquire(): 공유자원에 Lock을 설정하는 메소드, 이 메소드가 호출되면 공유자원 개수가 1개 줄어듭니다.

release(): 공유자원에 Lock을 해제하는 메소드, 이 메소드가 호출되면 공유자원 개수가 1개 늘어납니다.

3.작업 방법
=>Semaphore 클래스의 인스턴스를 스레드 외부에서 생성
=>Semaphore 인스턴스를 스레드에게 전달해서 공유자원을 사용하는 부분에서 이용

1)세마포어가 적용된 스레드 클래스
public class ThreadEx extends Thread {
	//세마포어 변수
	private Semaphore sem;
	
	//외부에서 Semaphore를 주입받습니다.
	public ThreadEx(Semaphore sem) {
		this.sem = sem;
	}
	
	public void run() {
		try {
			//lock을 취득 - 사용 개수가 1개 줄어듬
			sem.acquire();
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		
		System.out.println("몬스터 생성");
		try {
			Thread.sleep(3000);
		}catch(Exception e) {}
		
		System.out.println("몬스터 소멸");
		//lock을 해제 - 사용 개수가 1개 늘어남
		sem.release();
	}
}

2)main 메소드
public class SemaphoreMain {

	public static void main(String[] args) {
		//동시에 3개 까지 실행되는 세마포어 생성
		Semaphore sem = new Semaphore(3);
		for(int i=0; i<20; i=i+1) {
			ThreadEx th = new ThreadEx(sem);
			th.start();
		}
	}
}

**병렬 처리
=>동시에 2개 이상의 작업을 수행하는 것
=>자바에서는 fork&join 프레임워크(1.7) 와 스트림 API(1.8)에서 제공
1부터 100까지의 합계를 구하는 경우 프로세서가 2개 이상이라면 1-50까지를 하나의 프로세서가 계산하고 다른 프로세서가 51-100까지의 합을 계산해서 더하면 훨씬 효율적으로 작업을 할 수 있게 됩니다.
=>작성 방법
작업을 수행하고 리턴 여부에 따라서 RecursiveAction(리턴 값이 없는 경우) 이나 RecursiveTask(리턴 값이 있는 경우) 클래스를 상속받는 클래스를 생성하고 compute 메소드를 재정의해서 작업을 어떻게 분할해서 수행할 지 작성하고 결과를 리턴하면 됩니다.
RecursiveTask는 리턴할 데이터 타입으로 제너릭을 적용해야 하고 compute의 리턴 타입도 일치해야 합니다.

**Java GUI
1.awt
=>운영체제의 자원을 이용해서 GUI 프로그래밍
=>운영체제 별로 다르게 출력될 수 있습니다.
=>운영체제에 종속적이라고 느리고 무겁습니다.

2.swing
=>jvm 자원을 이용해서 GUI 프로그래밍
=>운영체제에 독립적이고 속도가 awt 보다는 빠릅니다.
=>swing 의 대부분의 클래스는 awt로부터 상속받았습니다.

3.javaFX
=>가볍고 풍부한 UI 제공
=>레이아웃, 스타일, 애플리케이션 로직의 분리: MVC 구현
=>html 이나 css 도 사용이 가능
=>swing으로 만들어져 있는 많은 애플리케이션들이 javaFX로 변환되고 있는 중

4.awt 와 swing의 이벤트 처리 방식이 안드로이드 이벤트 처리 방식
awt 와 swing은 이벤트 처리 클래스가 별도의 클래스로 존재하는데 안드로이드에서는 뷰의 내부 클래스로 존재

**AWT
=>운영체제에 종속적인 GUI 프로그래밍
=>최근에는 거의 사용 안함

1.GUI 화면 구성 요소
1)Component
=>화면에 보여지는 개체들의 최상위 클래스

2)Container
=>Component로 부터 상속을 받아서 다른 컴포넌트들을 묶어서 출력하기 위한 컴포넌트
=>단독으로 출력가능한 객체: Frame, Dialog
=>단독으로는 출력이 안되는 객체: Panel, Window
=>브라우저를 이용해서 출력하는 객체: Applet - 사용을 금기시 함
HTML5에서는 별도의 플러그 인 없이 웹 애플리케이션을 구현하자는 주의여서 active-X, applet, flash 등의 사용을 배체 

2.Component 의 주요 메소드
Color getBackground(), void setBackground(Color color) -> 배경색 관련 메소드
Cursor getCursor(), void setCursor(Cursor cursor) -> 마우스 커서 관련 메소드
Font getFont(), void setFont(Font font) ->폰트
Color getForeground(), void setForeground(Color color) -> 글자 색
Point getLocation(), void setLocation(Point point) ->좌표
Dimension getSize(), void setSize(Dimension dimension)->크기
=>크기와 좌표는 분할해서 2개로 설정해도 됩니다.
Rectangle getBounds(), void setBounds(Rectanlgle rectangle)-> 좌표와 크기
=>숫자 4개로 설정이 가능
위치의 기본값은 0,0 크기의 기본값도 0,0

void setEnabled(boolean isEnabled): 활성화 여부 설정
void setVisible(boolean isVisible): 화면 출력 여부

3.Frame
=>애플리케이션의 가장 기본이 되는 윈도우
=>기본적으로 화면에 출력되지 않도록 설정되어 있기 때문에 setVisible을 호출해서 화면에 보여지도록 설정해야 합니다.
=>setTitle을 이용하면 제목을 설정할 수 있습니다.
=>종료버튼이 제공이 되지만 기능은 없습니다.
나중에 이벤트 처리를 해야만 창을 종료 할 수 있습니다.

4.Component를 다른 Component에 추가할 때는 add(Component component)를 호출하면 추가됩니다.

5.윈도우 생성
=>제공되는 클래스를 사용할 때 제공되는 클래스의 인스턴스를 바로 만들어서 사용하는 경우인데 기능이 충분해서 인스턴스 생성만으로 옵션들을 설정해서 사용합니다.
=>상속받아서 사용하는 경우는 기능이 부족해서 기능을 추가해서(Overriding) 사용하기 위해서 입니다.
초기화 작업을 추가하거나 메소드 오버라이딩을 해서 사용

1)Frame 인스턴스를 만들어서 출력

2)Frame으로부터 상속받는 클래스를 만들고  클래스의 인스턴스를 만들어서 출력
=>이 방법이 권장
=>생성자를 만들어서 필요한 옵션을 설정

6.Panel
=>단독으로는 출력될 수 없는 컨테이너로 여러 컴포넌트들을 묶어서 출력하기 위한 객체
1)생성자
Panel(): 기본 배치 방법으로 생성
Panel(LayoutManager layoutManager): 배치 방법을 설정해서 생성

2)주요 메소드
add(Component component): 패널위에 컴포넌트를 추가

7.Dialog(대화상자)
1)Modal 과 Modeless
Modal: 화면에 출력되어 있으면 다른 곳으로 제어권을 뺐기지 않는 대화상자, 열기와 저장 대화상자

Modeless: 화면에 출력된 상태에서 다른 곳으로 제어권을 옮길 수 있는 대화상자, 찾기와 바꾸기
옵션을 대화상자에서 변경하고 바로 적용하고자 할 때 사용
modeless는 지역변수로 만들면 나중에 대화상자를 닫지 못하는 경우가 발생할 수 있습니다.

2)생성자
Dialog(Frame 이나 Dialog owner): 대화상자가 닫히고 난 후 포커스를 받을 윈도우를 설정해서 생성
Dialog(Frame 이나 Dialog owner, String title)
Dialog(Frame 이나 Dialog owner, boolean modal)
Dialog(Frame 이나 Dialog owner, String title, boolean modal)

8.Button
1)생성자
Button()
Button(String title)

2)메소드
String getLabel()
void setLabel(String label)

9.CheckBox
1)생성자
CheckBox()
CheckBox(String title)
CheckBox(String title, boolean state)
CheckBox(String title, CheckboxGroup group, boolean state)
=>CheckboxGroup 인스턴스를 생성해서 대입하면 라디오 버튼

10.Choice
=>여러 개의 항목을 출력하고 그 중에 하나를 선택할 수 있도록 해주는 컴포넌트
1)생성자
Choice()

2)메소드
void add(String item)
String getItem(int index)
int getItemCount()
int getSelectedIndex(): 선택된 인덱스를 리턴
String getSelectedItem(): 선택된 문자열을 리턴
void remove(int index 또는 String item)

11.Label 
=>텍스트 출력 컴포넌트
1)생성자
Label()
Label(String text)
Label(String text, int alignment): 맞춤을 지정해서 출력
alignment는 정수지만 옵션이기 때문에 직접 숫자를 설정하지 않고 클래스의 상수 이용

2)메소드
String getText()
void setText(String text)
void setAlignment(int alignment)

12.List
=>여러 개의 항목을 출력하고 선택할 수 있도록 해주는 컴포넌트
=>Multiple Mode 설정을 이용해서 여러 개 선택이 가능
1)생성자
List()
List(int rows): 보여 줄 행의 개수
List(int rows, boolean multipleMode): 행의 개수를 설정하고 다중 선택 모드를 설정

2)Choice의 메소드에 추가
int [] getSelectedIndexes(): 여러 개 선택한 경우 선택된 인덱스를 배열로 리턴
String [] getSeletedItems()

13.TextField
=>한 줄의 문자열을 입력받는 컴포넌트
1)생성자
TextField()
TextField(int columns): 크기(글자 개수) 설정
TextField(String text): 초기 문자열
TextField(String text, int columns): 초기 문자열

2)메소드
void setEchoChar(char ch): 화면에 보여질 문자

14.TextArea
=>여러 줄 입력받는 컴포넌트
=>TextArea(String text, int rows, int columns, int scrollbars)

15.ScrollPane
=>GUI 프로그래밍에서는 자신의 부모보다 더 큰 콘텐츠는 화면에 출력할 수 없습니다.
부모보다 큰 경우에는 Scroll이 가능한 컴포넌트에 배치를 해서 스크롤 바를 이용해서 보여주도록 해야 합니다.
=>생성자
ScrollPane(int 스크롤바정책): 항상 보여줄 것인지 아니면 필요할 때만 보여줄 것인지 등

16.메뉴
=>MenuBar, Menu, MenuItem(CheckboxMenuItem)
=>MenuBar 인스턴스를 만들고 Frame에 add
=>Menu를 만들고 Menu는 MenuBar에 add, Menu를 만들 때는 문자열과 함께 생성
=>MenuItem 이나 Menu를 만들어서 Menu에 부착

17.Common Dialog
=>자주 사용하는 기능의 대화상자를 미리 만들어서 제공
=>awt 에서는 FileDialog 를 제공

1)FileDialog의 생성자
FileDialog(Frame owner, String title, int mode): mode는 열기 대화상자인지 저장 대화상자로 만들것인지 결정 - FileDialog.LOAD, FileDialog.SAVE

2)FileDialog의 메소드
String getFile(): 선택한 파일명 리턴
String getDirectory(): 선택한 디렉토리명 리턴

void setFile(String file): 파일을 선택
void setDirectory(String directory): 디렉토리를 선택

18.Layout
=>컨테이너에 컴포넌트를 배치하는 방법
=>Panel은 생성할 때 설정이 가능하고 Frame 과 Panel 모두 setLayout 메소드를 이용해서 변경도 가능
1)FlowLayout
=>Panel의 기본 배치 방법으로 가로 방향으로 컴포넌트를 배치하고 더 이상 공간이 없으면 아래쪽으로 배치
=>new FlowLayout() 으로 생성

2)BorderLayout
=>Frame 의 기본 배치 방법으로 동서남북 그리고 중앙에 하나의 컴포넌트만 배치하는 방법
add 를 다른 옵션없이 사용하면 중앙에 1개만 배치됩니다.
=>각 방향에 배치를 할 때는 add(String 방향, Component component)로 배치
=>방향은 대소문자 구분을 함(East, West, North, South, Center)
=>동서남북에 배치가 안되면 그 영역은 전부 Center의 영역
=>하나의 영역에 하나의 컴포넌트만 배치가 가능한데 컴포넌트를 Panel로 만들어서 배치하면 여러 개도 배치 가능

3)GridLayout
=>격자(표) 모양의 레이아웃
=>하나의 셀에 하나의 컴포넌트를 배치
=>add를 호출하면 순서대로 배치
=>셀이 부족하면 자동으로 늘어남
=>new GridLayout(int 행의 수, int 열의 수)로 만들어서 setLayout 메소드에 대입

4)CardLayout
=>화면에 하나씩 겹쳐서 배치

5)null
=>지금까지의 레이아웃은 크기 조절이나 위치 조정을 못합니다.
=>레이아웃에 null을 설정하면 컴포넌트들의 위치나 크기를 조절할 수 있습니다.
=>위치나 크기를 조절 할 때 해상도나 전체 화면 크기를 고려해서 절대값보다는 상대적인 값으로 설정하는 것을 권장합니다.
=>화면에 배치되는 모든 컴포넌트들의 좌표와 크기를 설정해야 합니다.








