**Design Pattern
=>객체의 사용 용도에 따라 클래스를 디자인하는 것
1.생성과 관련된 패턴
1)Singleton
=>인스턴스를 1개만 만들 수 있도록 클래스를 디자인 하는 것
=>관리자 클래스(Controller, Manager)나 애플리케이션 전체가 공유해야 하는 공유 데이터를 갖는 클래스 또는 서버에서 클라이언트의 요청을 처리하는 클래스 등은 일반적으로 인스턴스를 1개만 만들어서 사용
=>java.lang.Runtime 클래스가 이 패턴으로 디자인

2)Decorator Pattern
=>외부에서 데이터를 주입받아 인스턴스를 생성하는 구조
=>하는 일은 유사한데 일을 수행해야 하는 대상이 여러가지 종류일 때 사용하는 패턴
=>작업을 수행하는 대상을 클래스 내부에서 직접 생성하지 않고 외부에서 생성한 후 주입받는 형태의 구조
=>java.io.BufferedReader 클래스가 Decorator Pattern의 대표적인 예
BufferedReader 는 문자 스트림에서 문자열을 읽어오는 스트림
new BufferedReader(new InputStreamReader(new FileInputStream(String filepath))): 파일에서 읽어오기
new BufferedReader(new InputStreamReader(Socket.getInputStream())): 소켓에서 읽어오기
new BufferedReader(new InputStreamReader(HttpURLConnection.getInputStream())): 웹에서 읽어오기

=>매개변수가 여러 개가 될 수 있습니다.
=>C++ 이나 Java 는 생성자 오버로딩을 이용해서 구현하거나 매개변수로 대입되는 클래스의 다형성을 이용해서 구현

2.구조와 관련된 패턴
1)템플릿 메소드 패턴
=>메소드의 원형을 인터페이스(추상 클래스)에 선언하고 인터페이스를 구현한 클래스에 메소드를 구현하는 방식
=>c나 c++(추상 클래스)는 인터페이스 대신에 헤더파일을 이용해서 구현
최근에는 이런 방식은 잘 사용되지 않음

최근에 등장하는 GUI를 구현하는 언어들 중에도 파일을 2개로 나누어서 구현하는 경우가 있는데 이 경우는 디자인 파일과 구현 파일을 분리하는 형태이지 헤더파일을 이용하는 형태가 아닙니다.

=>프로그래밍을 할 때 사용자의 요청을 처리하는 클래스는 이 패턴으로 디자인 합니다.
이렇게 사용자의 요청을 처리하는 메소드를 소유한 클래스를 Service 클래스라고 합니다.
데이터베이스 연동 프로그램에서 트랜잭션을 적용하는 지점은 Service 클래스의 메소드입니다.

=>어떤 Unit 이라는 클래스를 설계하는데 사용자가 공격과 이동이라는 동작을 수행해야 합니다.
인터페이스 생성
public interface Unit {
	//공격을 수행하는 메소드
	public void attack();
	//이동을 수행하는 메소드
	public void move();
}

인터페이스를 구현한 클래스를 생성
public class UnitImpl implements Unit {

	@Override
	public void attack() {
		System.out.println("공격");
	}

	@Override
	public void move() {
		System.out.println("이동");

	}

}

main 메소드를 만들어서 사용
public class UnitMain {

	public static void main(String[] args) {
		//템플릿 메소드 패턴이 적용된 클래스의 인스턴스 만들기
		//변수는 인터페이스 이름을 사용하고 생성자는 클래스 이름을 이용하는 형태로 많이 작성합니다.
		Unit unit = new UnitImpl();
		unit.attack();
		unit.move();
		
		//List<String> list = new ArrayList<String>();
	}
}

2)Adapter Pattern
=>구현된 인터페이스를 이용해서 상속받은 클래스의 메소드를 호출하는 패턴
=>상속받은 클래스의 메소드를 직접 호출하기가 어려운 경우 이용
=>상속을 받았기 때문에 상위 클래스의 메소드를 호출해서 사용하는 것이 가능한데 상위 클래스의 메소드 이름을 다른 용도로 사용하는 경우 - 상위 클래스의 메소드의 내용을 변경해서 오버라이딩 하는 경우 
=>원래 오버라이딩은 상위 클래스의 메소드 기능을 확장하기 위해서 사용하는데 확장이 아니라 변경한 경우

=>Base 클래스 생성
public class OldSystem {
	public void process() {
		System.out.println("예전 처리");
	}
}

=>Target 인터페이스 생성
public interface Target {
	//OldSystem 의 process 를 호출하기 위한 메소드
	public void legacyProcess();
}

=>Derived 클래스 생성
public class NewSystem extends OldSystem implements Target{
	@Override
	public void process() {
		//구현된 메소드의 오버라이딩: 상위 클래스의 메소드를 호출하고 기능을 추가
		/*
		super.process();
		System.out.println("기능 추가");
		*/
		
		System.out.println("새로운 기능");
	}

	@Override
	public void legacyProcess() {
		super.process();
		
	}
}

=>main 메소드를 만들어서 실행
public class AdaterMain {

	public static void main(String[] args) {
		NewSystem newSystem = new NewSystem();
		//새로 만들어진 메소드
		newSystem.process();
		//이전에 만들어진 메소드
		newSystem.legacyProcess();

	}

}

3)Composite Pattern
=>재귀적 구조를 쉽게 처리하기 위한 패턴
=>Recursive Call(Recursion - 함수가 내부에서 함수 자신을 다신 호출하는 경우)
=>파일 시스템에는 파일과 디렉토리가 있는데 디렉토리를 삭제할려고 하는 경우 디렉토리 안의 내용을 확인해서 디렉토리이면 다시 그 안에 있는 내용들을 삭제해야 합니다.
=>하나의 인터페이스를 만들고 인터페이스에 공통된 메소드 이름을 만들어주고 파일과 디렉토리처리를 위한 클래스를 별도로 만들어서 처리하는 메소드를 구현합니다.
다형성을 구현하는 방식과 유사합니다.

=>인터페이스는 Entry - add 와 remove 그리고 rename
=>클래스는 File 과 Directory 로 생성

=>인터페이스 생성
//파일과 디렉토리 클래스에서 공통으로 사용할 메소드를 소유한 인터페이스
public interface Entry {
	public void add(Entry entry);
	
	void remove();
	
	void rename(String name);
}

=>File 클래스 생성
public class File implements Entry {
	//파일 이름을 저장할 변수
	private String name;
	
	public File(String name) {
		this.name = name;
	}

	@Override
	public void add(Entry entry) {
		System.err.println("파일에는 파일이나 디렉토리를 추가할 수 없습니다.");
	}

	@Override
	public void remove() {
		System.out.println(name + "가 삭제되었습니다.");

	}

	@Override
	public void rename(String name) {
		this.name = name;
	}
}

=>Directory 클래스
public class Directory implements Entry {
	private String name;
	//File 이나 Directory를 소유할 수 있기 때문에 Entry를 여러 개 저장할 수 있는 자료구조를 소유
	List <Entry> list;
	
	public Directory(String name) {
		this.name = name;
		list = new ArrayList<Entry>();
	}
	
	@Override
	public void add(Entry entry) {
		list.add(entry);
	}

	@Override
	public void remove() {
		//Iterator를 이용해서 데이터 접근
		Iterator <Entry> iter = list.iterator();
		while(iter.hasNext()) {
			Entry entry = iter.next();
			//디렉토리인지 확인해서 작업을 수행을 하지 않을 수 도 있습니다.
			//File이 있으면 File의 remove를 호출하고 Directory이면 Directory의 remove를 호출 - 다형성(Polymorphism)
			entry.remove();
		}
		System.out.println("내부 데이터는 전부 삭제되었습니다.");
	}

	@Override
	public void rename(String name) {
		this.name = name;
	}
}

=>main 메소드를 만들어서 테스트
public class CompositeMain {

	public static void main(String[] args) {
		File f1 = new File("파일1");
		File f2 = new File("파일2");
		File f3 = new File("파일3");
		
		Directory subDirectory = new Directory("하위 디렉토리");
		subDirectory.add(f1);
		subDirectory.add(f2);
		
		Directory superDirectory = new Directory("상위 디렉토리");
		superDirectory.add(subDirectory);
		superDirectory.add(f3);
		
		superDirectory.remove();
		
	}

}

3.행동에 관련된 패턴
1)Command Pattern
=>처리 내용이 비슷한 명령을 모아서 실행하는 처리가 필요할 때 명령을 인스턴스로 취급해서 처리하는 패턴

=>데이터를 삽입하는 처리와 수정하는 처리가 필요한 경우

interface Action{
	public void execute(DTO dto);
}

class InsertAction implement Action{
	public void execute(DTO dto){
		삽입하는 코드
	}
}

class UpdateAction implement Action{
	public void execute(DTO dto){
		수정하는 코드
	}
}

//action에 대입되는 인스턴스 자체가 명령어와 유사한 역할을 수행
Action action = null;
if(command == 삽입){
	action = new InsertAction();
}else if(command == 삭제){
	action = new UpdateAction();
}
action.execute(dto);

=>이러한 패턴은 웹 서버의 Controller 클래스를 만들어서 요청에 따라 처리를 할 때 많이 사용
웹 서버 프로그래밍을 하다보면 URL에 따른 Routing 구조를 만들 때도 이 구조를 이용합니다.

2)Observer Pattern
=>어떤 인스턴스의 내부 상태가 자주 변경되는 경우 내부 상태가 변경되는지를 감시하고 있다가 변경이 되면 알려줘서 다른 처리를 할 수 있도록 해주는 패턴
=>알려준다고 해서 Notification 이라는 표현을 많이 사용합니다.
=>이 패턴을 사용하는 대표적인 예가 스마트 폰의 뷰에서 키보드가 화면에서 보여지고 사라지는 것을 감시해서 뷰의 컴포넌트들을 재배치하는 형태

3)Strategy Pattern
=>어떤 클래스가 공통된 부분이 있고 서로 다른 부분이 있는 경우 공통된 부분은 클래스 안에서 만들어 사용하고 서로 다른 부분은 외부에서 주입(Injection)받아 사용하는 패턴

public class Injection {
	private String common; //모든 인스턴스들이 "Java"라고 저장해서 사용
	private String diff1;  //인스턴스들 마다 다름
	private String diff2;  //인스턴스들 마다 다름
	
	public Injection(String diff1) {
		common = "Java";
		//생성자를 이용한 주입
		this.diff1 = diff1;
	}
	
	//diff2 에 대한 setter 메소드 - setter 나 getter를 소유한 인스턴스 변수를 property라고 합니다.
	public void setDiff2(String diff2) {
		this.diff2 = diff2;
	}
	
	//common 과 diff1 은 null 일 가능성이 없지만 
	//diff2는 setter를 이용해서 대입받기 때문에 null일 가능성이 존재
	//서버 프로그래밍을 할 때는 메모리 부담이 되더라도 처음부터 만들어두고 사용하는 것이 좋고
	//클라이언트 프로그래밍을 할 때는 속도가 느리더라도 필요할 때 생성하는 것이 좋습니다.
	public void disp() {
		System.out.println(common.toUpperCase());
		System.out.println(diff1.toUpperCase());
		System.out.println(diff2.toUpperCase());
	}
	
}

public class InjectMain {

	public static void main(String[] args) {
		Injection injection = new Injection("JavaScript");
		//다른 메소드들을 호출
		
		
		//다른 메소드를 호출
		injection.setDiff2("Spring");
		injection.disp();
		
		//setDiff2를 호출하지 않았기 때문에 diff2가 null 인 상태에서 toUpperCase를 호출해서 예외
		injection = new Injection("FrontEnd");
		injection.disp();

	}

}

=>Design Pattern은 하나의 클래스에 여러가지를 적용하기도 합니다.
=>Design Pattern의 개념은 절대적인 개념이 아니라서 개발자마다 약간씩 다르게 설명하기도 합니다.
Singleton, Template Method, Command Pattern 은 모두 동일하게 설명합니다.
=>이외에도 인스턴스 생성을 대신해주는 Factory Method Pattern 이나 개발자가 만든 클래스에 코드를 더해서 실제로는 개발자가 만든 클래스와 다른 형태의 인스턴스를 만들어내는 Proxy Pattern 등도 있습니다.
=>객체지향 프로그래밍에서는 디자인 패턴이 중요합니다.

객체지향 프로그래밍 언어 문법 -> 자료구조&알고리즘 -> 디자인패턴 -> SW 공학(개발 방법론 ...)


**외부로부터 데이터를 받아서 사용하는 경우
=>주입을 받는 방법은 생성자를 이용하는 방법이 있고 프로퍼티(setter)를 이용하는 방법
생성자를 이용하는 방법은 처음부터 가지고 있기 때문에 NullPointerException이 발생할 가능성이 적지만 메모리에 부담이 되고 setter를 이용하는 방식은 사용하기 전에 주입받아서 사용하기 때문에 메모리를 절약할 수 있지만 NullPointerException에 대비해야 합니다.

**데이터 저장 및 읽기
1.로컬이나 원격에 flat file 형태로 저장
=>text 형식: txt, csv 형식 - 용량이 작다는 장점이 있지만 전체가 아닌 일부 검색은 어려움
=>xml, json 형식: 규격화 된 포맷 형식 - 인간이 알아보기 쉬움, 인간이 직접 작성도 가능, 사이즈가 커지면 용량도 커지고 알아보기도 어려워집니다.
설정 내용을 저장할 때 나 실시간으로 작은 용량의 데이터를 주고받을 때 이용

2.별도의 저장 프로그램 이용
=>Database: 앞의 방법 들보다 보안이 우수하고 검색 조건을 다양하게 설정할 수 있음, 데이터 이외의 많은 것들을 저장해야 하기 때문에 오버헤드가 큼

**관계형 데이터베이스 인 오라클 사용
1.프로그래밍 언어에서 관계형 데이터베이스를 사용하는 방법
1)언어가 제공하는 기능만을 이용해서 구현 - Java의 경우는 JDBC 그리고 윈도우는 ODBC 등

2)프레임워크를 이용해서 구현 - 언어가 제공하는 기능을 편리하게 사용할 수 있도록 만들어진 프레임워크 이용
- SQL Mapper: Java 코드와 SQL을 분리해서 작성하는 구조, MyBatis(iBatis가 예전 이름)가 대표적
=>성능은 떨어지지만 쉬워서 SI(시스템 통합 - 기업의 전산화, 외주를 많이 줌)에서 많이 사용

- Object Relation Mapper
=>최근에 많이 사용하는 프레임워크로 하나의 행을 하나의 인스턴스와 매핑하는 프레임워크
하나의 테이블을 하나의 클래스와 매핑
데이터베이스에 대한 구조를 파악하고 있어야만 사용이 가능
어렵지만 성능이 우수해서 솔루션 제작에 많이 이용
Java의 JPA(구현체로는 Hibernate)가 대표적인 프레임워크 - 다른 언어에도 대부분 있음
SQL 없이 데이터베이스 작업이 가능 - DBMS를 변경해서 적용하더라도 설정파일만 수정하면 됩니다.

2.Java에서 관계형 데이터베이스 연동 방법
1)사용하고자 하는 데이터베이스와의 인터페이스를 제공하는 드라이버를 사용할 수 있도록 설정
=>자바는 드라이버를 build path에 추가하고 클래스를 로드

2)데이터베이스 접속 정보를 가지고 데이터베이스 연결 객체(java.sql.Connection)를 생성
=>접속정보는 데이터베이스 URL, 포트번호, 데이터베이스이름(오라클의 경우는 sid 또는 serviceName)이 필요하고 접속계정과 비밀번호도 필요
=>데이터베이스 종류에 따라서 접속 계정과 비밀번호가 필요없는 경우가 있음
=>데이터베이스 중에는 자신의 기본 포트를 사용하는 경우 포트번호 생략이 가능(MySQL 은 3306 포트인 경우 생략 가능)
=>연결 객체를 이용해서 트랜잭션 사용 방법을 설정합니다.

3)Connection을 이용해서 SQL을 주고받을 객체를 생성하고 실행 - Java는 Statement(완성된 SQL), PreparedStatement(나중에 데이터를 매핑할 수 있는 SQL - 대부분의 언어가 사용), CallableStatement(Procedure 실행)

4)결과를 사용
- select를 제외한 구문 :  영향받은 행의 개수를 정수로 리턴
- select 구문 : select의 결과를 사용할 수 있는 Cursor를 리턴

5)트랜잭션 처리를 하고 사용한 객체를 close를 합니다.

6)java에서는 이 과정 전체가 예외처리를 강제합니다.
다른 언어에서 예외처리를 강제하지 않더라도 예외처리를 해주는 것이 좋습니다.
문제가 발생하면 어떤 조치를 취할 수 있도록 해 주어야 합니다.
데이터베이스는 외부에 존재하는 경우가 많기 때문에 어떤 문제가 발생할 지 우리가 예측할 수 없습니다.

3.애플리케이션 프로그램이 잘 수행하지 않는 SQL
=>Grant(권한부여), Revoke(권한회수)
=>Create(개체 생성), Alter(개체 구조 변경), Drop(개체 삭제), Truncate(테이블의 데이터만 삭제), Rename(테이블의 이름 변경)
=>주로 관리자가 사용하는 SQL 명령들이고 이 명령들은 Rollback이 안됩니다.
관리자만 로컬에서 사용하는 애플리케이션을 만들어서 수행하도록 하는 경우는 종종 있습니다.

4.데이터베이스 계정
IP: 211.183.7.61
PORT:1521
SID: xe
계정: user01 - user30
비번: user01 - user30

5.샘플 테이블을 생성
=>Oracle 의 자료형
숫자 - number(정수자릿수), number(전체자릿수, 소수자릿수)

문자열 - char(글자수), varchar2(글자수), clob
한글은 곱하기 3해야 합니다.
char를 사용하면 글자수보다 작은 양의 글자를 입력하면 뒤에 공백이 있습니다.
clob는 아주 많은 글자인 경우 사용

날짜 - date

=>거래정보 테이블
거래번호 - 정수 10자리이고 기본키, 일련번호 형식
품목코드 - 거래한 품목의 코드, 문자열 20자리
품목명 - 거래한 품목 이름, 문자열 100자리
단가 - 정수 7자리
수량 - 정수 3자리
거래일 - 날짜
거래ID - 거래한 유저의 ID, 문자열 50자리

create table transactions(
	num number(10) primary key,
	itemcode varchar2(20),
	itemname varchar2(100),
	price number(7),
	cnt number(3),
	transdate date,
	userid varchar2(50)
);

6.프로젝트를 생성하고 오라클을 사용할 준비
=>데이터베이스 드라이버를 프로젝트의 build path에 추가
오라클은 ojdbc?.jar
ojdbc6.jar : 숫자의 의미는 자바 버전이고 이외의 숫자가 추가로 있으면 오라클 버전입니다.
상위버전은 하위버전을 지원

7.애플리케이션이 시작될 때 1번 드라이버 클래스를 로드
=>Class.forName("드라이버 클래스 이름");
=>실제 애플리케이션을 만들 때는 드라이버 클래스 이름을 별도의 파일에 작성하고 읽어들이는 구조로 만듭니다.
=>오라클의 경우 드라이버 클래스 이름: oracle.jdbc.driver.OracleDriver
=>드라이버 클래스이름이 틀리거나 jar 파일을 build path에 추가하지 않았다면 예외가 발생합니다.

public static void main(String[] args) {
	try {
		//이 코드는 애플리케이션 전체에서 1번만 수행하면 됩니다.
		Class.forName("oracle.jdbc.driver.OracleDriver");
		System.out.println("드라이버 클래스 로드 성공");
	}catch(Exception e) {
		System.out.println(e.getMessage());
		e.printStackTrace();
	}
}

8.데이터베이스 연결 및 해제
=>데이터베이스에 연결할 때는 3가지 정보가 필요
데이터베이스 URL: 데이터베이스 종류마다 설정 방법이 다름
계정
비번
=>계정과 비번은 없어도 되는 경우가 있습니다.
=>오라클의 URL - jdbc:oracle:thin:@IP 또는 Domain:port:sid
sid 가 아니고 serviceName인 경우는 : 대신에 /serviceName

=>데이터베이스 접속
Connection ? = DriverManager.getConnection(url, id, pw);

=>데이터베이스 접속 해제
?.close();

=>url이 잘못된 경우는 기본적인 접속시간동안 접속을 해보고 네트워크 문제라고 예외를 발생시킵니다.
=>id나 pw가 잘못된 경우는 logon denied 라는 예외를 발생시킵니다.

public static void main(String[] args) {
	try {
		//이 코드는 애플리케이션 전체에서 1번만 수행하면 됩니다.
		Class.forName("oracle.jdbc.driver.OracleDriver");
		//System.out.println("드라이버 클래스 로드 성공");
			
		//데이터베이스 접속
		Connection con = DriverManager.getConnection(
			"jdbc:oracle:thin:@211.183.7.61:1521:xe", "user00", "user00");
		System.out.println("접속 성공");
			
		//접속 해제
		con.close();
			
	}catch(Exception e) {
		System.out.println(e.getMessage());
		e.printStackTrace();
	}
}

9.데이터베이스 드라이버이름이나 접속 정보는 별도로 작성한 후 읽어 들이는 구조로 만드는 것을 권장
개발환경과 운영환경이 다를 가능성 때문입니다.



