**Property 와 getter & setter
1.접근자 메소드
=>인스턴스 변수에 접근하기 위한 메소드
=>객체 지향 프로그래밍에서는 인스턴스 변수에 인스턴스(객체)가 직접 접근하는 것을 권장하지 않습니다.
인스턴스가 인스턴스 변수에 직접 접근하게 되면 예기치 않은 상황이 발생할 수 있기 때문입니다.
변수는 일반적으로 동기화(Synchronized)의 대상이 아닙니다.
대다수의 프로그래밍 언어가 동기화의 단위가 메소드 또는 인스턴스입니다.

1)getter
=>인스턴스 변수의 데이터를 리턴해주는 메소드
=>메소드의 리턴 타입은 인스턴스 변수의 리턴 타입과 동일하게 만듭니다.
=>메소드의 이름은 get변수명 으로 하는데 변수명의 첫글자는 대문자로 하고 변수의 자료형이 boolean 인 경우는 get 대신에 is를 사용하는 것이 관례
=>메소드의 내용은 인스턴스 변수를 리턴하는 것만 하는 것이 보통입니다.

2)setter
=>인스턴스 변수의 값을 설정하는 메소드
=>메소드의 리턴 타입은 void
=>메소드의 이름은 set변수명으로 하는데 변수명의 첫글자는 대문자
=>인스턴스 변수와 동일한 자료형의 매개변수를 받아서 인스턴스 변수에 그 값을 저장하는 내용을 소유
=>저장을 할 때는 다른 내용을 추가하기도 하는데 저장하기 전에 유효성 검사를 해서 저장 가능한 데이터인지 확인하는 작업이나 값이 변경된다는 내용을 다른 곳에 알려주기도 합니다.
Key - Value Observing 이라고 합니다.

class T{
	private int age;    //private 은 클래스 내부에서만 사용이 가능
	private String name;

	//setter 메소드
	public void setAge(int n){
		age = n;
	}

	public void setName(String n){
		name = n;
	}

	//getter 메소드
	public int getAge(){
		return age;
	}

	public String getName(){
		return name;
	}
}

T ob = new T(); //인스턴스 생성
ob.setAge(50);
ob.setName("park");
System.out.println("이름:" + ob.getName());

3)최근에 등장한 IDE 들은 대부분 접근자 메소드를 자동으로 만들어주는 기능을 제공

4)인스턴스 변수가 scala data 가 아닌 배열이나 List 인 경우 인덱스를 받아서 하나만 가져오거나 하나만 수정하는 메소드도 만드는 것을 권장합니다.

2.Property(속성)
=>인스턴스가 변수를 호출하는 것처럼 사용하지만 실제로는 getter 나 setter 와 같은 접근자 메소드를 호출하는 것
=>VB, VC#, Python, Kotlin, Swift 등에서는 프로퍼티를 지원
=>Java에서는 지원을 하지 않지만 Java Web Programming에서 EL을 이용해서 이 프로퍼티를 지원합니다.

3.DTO(Data Transfer Object, Variable Object, Domain Class)
=>여러 개의 정보를 묶어서 하나로 만들기 위한 클래스

4.실습 - DTO 클래스를 만들고 main에서 클래스의 인스턴스를 만들고 내부 데이터 사용
1)DTO 클래스
public class Student {
	//인스턴스 변수 선언
	private int num;
	private String name;
	private String major;
	
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		//this 가 붙으면 메소드 내부에서는 찾지 않고 
		//메소드 외부에서 먼저 찾습니다.
		//this.num 은 메소드 외부에 있는 인스턴스 변수 num 이고
		//num은 메소드의 매개변수 num이 됩니다.
		this.num = num;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getMajor() {
		return major;
	}
	public void setMajor(String major) {
		this.major = major;
	}
	
}

2)main 메소드를 소유한 클래스
public class Main {

	public static void main(String[] args) {
		//Student 클래스의 인스턴스 생성
		Student student = new Student();
		//인스턴스 변수에 값을 설정
		student.setNum(1);
		student.setName("park");
		student.setMajor("CS");
		
		//인스턴스 변수의 값 가져오기
		System.out.println("번호:" + student.getNum());
		System.out.println("이름:" + student.getName());
		System.out.println("전공:" + student.getMajor());

	}

}

**Recursion - Recursive Call(재귀 호출)
=>메소드가 메소드 내부에서 자신의 메소드를 다시 호출하는 것
=>메소드는 호출되면 자신의 메모리 영역(Stack)을 생성하고 자신의 작업이 종료되면(return) 자신의 메모리 영역을 해제합니다.
메소드의 작업이 종료되기 전에 다른 메소드를 호출하면 Stack이 쌓이게 됩니다.
메모리 사용량이 늘어나고 실행의 결과도 여러 번 되돌아 가는 구조를 갖기 때문에 늦게 나오게 됩니다.
=>알고리즘을 표현할 때 쉽게 표현할 수 있는 경우가 많아서 종종 이용합니다.

10까지의 합 : 10 + 9까지의 합(9 + 8까지의 합)
=>위와 같은 형태로 합을 구할려고 했는데 결과에 다시 합이 나오는 경우
=>이런 경우에는 반드시 종료 시점이 있어야 합니다.
합의 경우는 1까지의 합은 1 이렇게 종료 시점이 명확하게 있어야 합니다.
=>재귀로 구현할 수 있는 것들로는 합계, 팩토리얼(곱), 피보나치 수열, 하노이의 탑, 퀵 정렬이나 병합 정렬등이 있습니다.

재귀 메소드 구현 방법
리턴타입 메소드이름(리턴타입과 동일한 자료형 매개변수이름){
	if(종료조건){	
		return 값;
	}else{
		return 메소드이름(매개변수);
	}
}

=>매개변수로 대입되는 데이터가 참조형이라면 return을 하지 않을 수도 있습니다.

1 - n 까지의 합을 구해주는 메소드(재귀를 이용)

int hap(int n){
	if(n == 1){
		return 1;
	}
	
	return n + hap(n-1);
}

4까지의 합
4 + hap(3)
4 + 3 + hap(2)
4 + 3 + 2 + hap(1)
4 + 3 + 2 + 1
=>재귀를 만들 때 주의할 점은 반드시 중단을 하거나 아무일도 하지 않는 조건을 만들어야 한다는 것입니다.
그렇지 않으면 무한 반복하다가 프로그램이 메모리 부족으로 종료됩니다.

1.fibonacci 수열
1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.....
f2:1
f1:1
result: 2

f2 = f1
f1 = result
result = f2 + f1

첫번째와 두번째 항은 무조건 1
세번째 항 부터는 앞쪽 2개 항의 합

fn = f(n-1) + f(n-2)
단 f1 = 1, f2 = 1

재귀로 가능한 이유
f(10) -> f(9) + f(8)

1)재귀를 이용하지 않고 해결
public int fibo1(int n){
	if(n == 1 || n == 2){
		return 1;
	}else{
		//피보나치 수열의 값을 저장할 변수
		int result = -1;

		//계산할 값 이전 2번째 항의 값을 저장할 변수
		int f2 = 1;
		//계산할 값 이전 1번째 항의 값을 저장할 변수
		int f1 = 1;
		for(int i=3; i<=n; i=i+1){
			result = f2 + f1;
			
			f2 = f1;
			f1 = result;
		}
		//피보나치 수열의 값 리턴
		return result;
	}
}

2)재귀를 이용해서 해결
public int fibo2(int n){
	if(n==1 || n==2){
		return 1;
	}else{
		return fibo2(n-1) + fibo2(n-2);
	}
}

2.피보나치 수열 확인
=>main을 소유한 클래스 에 작성: 메소드의 코드를 읽어보고 매개변수를 50정도로 늘려서 둘의 차이를 확인


public class Main {

	//재귀를 이용하지 않고 n 번째 피보나치 수열의 값을 리턴하는 메소드
	public static int fibo1(int n) {
		//첫번째나 두번째는 무조건 1
		if(n==1 || n==2) {
			return 1;
		}
		//세번째 부터는 이전 2개 항의 합
		else {
			int result = -1;
			//현재 계산할 항의 이전 두번째 항의 값을 저장할 변수
			int f2 = 1;
			//현재 계산할 항의 이전 첫번째 항의 값을 저장할 변수
			int f1 = 1;
			for(int i=3; i<=n; i=i+1) {
				//이전 2개 항의 합을 계산하고 2개 항을 다음 항으로 이동
				result = f2 + f1;
				f2 = f1;
				f1 = result;
			}
			return result;
		}
	}
	
	
	//재귀를 이용해서 피보나치 수열의 값을 찾아주는 메소드
	public static int fibo2(int n) {
		if(n==1 || n==2) {
			return 1;
		}else {
			//fibo2 메소드 내에서 fibo2 를 호출하기 때문에 재귀라고 합니다.
			return fibo2(n-1) + fibo2(n-2);
		}
	}
	
	public static void main(String[] args) {
		//Student 클래스의 인스턴스 생성
		Student student = new Student();
		//인스턴스 변수에 값을 설정
		student.setNum(1);
		student.setName("park");
		student.setMajor("CS");
		
		//인스턴스 변수의 값 가져오기
		System.out.println("번호:" + student.getNum());
		System.out.println("이름:" + student.getName());
		System.out.println("전공:" + student.getMajor());
		
		//현재 클래스 내부에 있는 메소드를 호출할 때는 이름만 기재하면 됩니다.
		int r =fibo1(100);
		System.out.println("r:" + r);
		
		r = fibo2(100);
		System.out.println("r:" + r);

	}

}


**Constructor(생성자)
=>인스턴스를 만들 때 호출하는 메소드
=>생성자는 반드시 new 라는 예약어와 함께 호출
1.자바에서의 생성자
1)클래스를 만들면 매개변수가 없는 기본 생성자가 제공되는데 클래스 안에 생성자를 만들면 이 생성자는 소멸됩니다.
2)생성자의 이름은 클래스이름으로 만들어야 합니다.
3)생성자 오버로딩(메소드 이름은 같고 매개변수의 개수나 자료형이 다른 경우)이 가능합니다.

2.생성자를 만드는 목적
=>인스턴스 변수의 값을 초기화할 목적으로 많이 생성
=>인스턴스가 생성될 때 다른 작업을 같이 수행하고자 하는 경우에도 생성

3.생성자를 만들때 주의할 점
=>매개변수가 없는 생성자를 default constructor 라고 하는데 이 생성자가 없는 경우 생성자를 호출할 때 반드시 매개변수를 대입해야 합니다.
=>default constructor 가 없는 클래스로 부터 상속받는 경우에는 반드시 생성자를 만들어서 상위 클래스의 생성자를 호출하는 구문을 만들어 주어야 합니다.
이 경우는 Android에서 많이 발생

4.실습
1)id 와 pw를 문자열로 저장할 수 있는 클래스 생성 - Member
public class Member {
	private String id;
	private String pw;
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPw() {
		return pw;
	}
	public void setPw(String pw) {
		this.pw = pw;
	}	
}

2)main 메소드를 소유한 실행 클래스를 만들고 main 메소드 안에서 인스턴스를 만들고 값을 저장한 후 값을 출력

public class Main {

	public static void main(String[] args) {
		//Member 클래스의 인스턴스를 생성
		//자바 개발자의 대부분은 인스턴스를 1개만 만드는 경우 클래스 이름의 첫글자만
		//소문자로 변환해서 이름을 생성을 합니다.
		//자바 개발을 할 때는 인스턴스를 자동으로 생성해주는 스프링 프레임워크를 많이 사용하는데
		//스프링이 이름을 만들 때 이 규칙을 적용
		Member mem1 = new Member();
		
		System.out.println("id:" + mem1.getId() + " pw:" + mem1.getPw());

	}

}

5.생성자를 별도로 만들지 않으면 인스턴스 변수의 값들은 기본값으로 채워집니다.
1)기본값
boolean -> false
정수 -> 0
실수 -> 0.0
나머지 -> null

2)위의 실습 결과는 id는 null 그리고 pw는 null이 출력

3)모든 인스턴스들이 id는 root pw는 1234로 초기화된 상태에서 시작하도록 하고자 함
=>인스턴스를 만들고 setter 메소드를 호출해서 id 와 pw 값을 변경해서 해결 가능
인스턴스를 1개만 생성한다면 위의 방법을 이용하는 것이 나쁘지 않지만 여러 개를 생성해야 하는 경우 매번 위와 같은 작업을 하는 것은 비효율적입니다.

=>위와 같은 경우는 생성자를 만들어서 생성자에서 값을 설정하는 것이 효율적입니다.

4)Member 클래스에 id에 root를 pw에 1234를 설정하는 생성자를 만듬
//Member 클래스의 생성자
//생성자는 리턴 타입없이 클래스 이름을 그대로 사용
//매개변수가 없는 생성자를 Default Constructor 라고 합니다.
public Member() {
	id = "root";
	pw = "1234";
}

5)main을 실행해보면 setter 를 호출하지 않아도 root 에 1234로 출력

6.매개변수가 있는 생성자
=>생성자는 오버로딩이 가능하기 때문에 기본 생성자가 있는 경우에도 매개변수가 있는 생성자를 만들 수 있습니다.
=>매개변수가 있는 생성자는 매개변수로 데이터를 대입받아서 인스턴스 변수를 초기화 할 목적으로 만듭니다.
=>외부에서 데이터를 주입받아서 인스턴스 변수를 초기화 할 수 있다면 setter 메소드의 호출횟수가 줄어들고 다양한 방법으로 인스턴스를 생성할 수 있게 됩니다.
=>객체 지향 언어에서는 생성자의 종류만큼 인스턴스를 생성할 수 있는 방법이 있습니다.

7.this() & super()
=>생성자에서 자신의 클래스의 다른 생성자를 호출할 때는 this(매개변수)를 이용할 수 있습니다.
=>super()는 상위 클래스의 생성자를 호출할 때 이용
생성자를 만들면 우리가 작성하지 않아도 가장 위에 super() 구문이 포함됩니다.
상위 클래스의 매개변수가 없는 생성자를 호출하는 구문입니다.
=>상위 클래스에 매개변수가 없는 생성자(Default Constructor)가 없는 경우 클래스를 상속받으면 에러가 발생합니다.

=>생성자를 만들지 않으면 이런 생성자가 자동으로 포함됨
public 클래스이름(){
	super();
}
상위 클래스의 매개변수가 없는 생성자를 호출하는 구문이 자동으로 포함되기 때문에 에러 발생
이런 경우에는 생성자를 만들고 super(매개변수)를 직접 호출해 주어야 합니다.

=>super()는 가장 위에 나와야 합니다.
=>this()는 super()를 제외하고 가장 위에 나와야 합니다.

8.인스턴스 배열에서의 생성자
=>인스턴스 배열을 만들 때 크기만 설정한 경우에는 각각의 인덱스에서 생성자를 호출해서 대입해 주어야 합니다.

클래스이름 [ ] 배열이름 = new 생성자이름[개수];
=>개수 만큼의 인스턴스를 저장할 수 있는 공간이 생성된 것입니다.
위의 경우는 인스턴스는 만들어지지 않았습니다.
배열이름[인덱스] = new 생성자(); 를 호출해서 각각에 대입을 해주어야 합니다. 

=>main 메소드에 작성하고 실행
		//Member 클래스의 인스턴스 배열을 생성
		//Member 인스턴스의 참조를 저장할 수 있는 공간 2개를 생성
		Member [] ar = new Member[2];
		
		//공간에 인스턴스를 생성해서 대입
		//이 구문을 생략하면 모두 null
		ar[0] = new Member();
		ar[1] = new Member();
		
		for(Member imsi : ar) {
			System.out.println(imsi);
		}

9.인스턴스 필드 이니셜라이저
=>클래스 안에 { }를 만들고 괄호 안에 내용을 작성하면 생성자를 호출할 때 { }안의 내용이 자동으로 수행됩니다.
 
=>Member 클래스에 작성하고 main을 실행해서 생성자가 호출될 때 마다 코드가 실행되는지 확인
//클래스 안에 { }를 만들고 작성하면 생성자를 호출할 때
//생성자보다 먼저 호출되서 내용을 수행
{
	System.out.println("객체를 생성합니다.");
}

10.참조형 변수 사이의 대입
=>참조형 데이터는 실제 데이터가 아니라 참조를 대입해주기 때문에 참조형 변수끼리 대입을 하면 동일한 영역을 가리키게 됩니다.
=>하나의 변경이 다른 하나에 영향을 주게 됩니다.
=>특별한 경우가 아니면 참조형 변수 사이의 대입은 하지 않는 것이 좋습니다.
=>참조형 변수의 데이터는 되도록이면 복제를 해서 다른 곳에 대입하는 것이 좋습니다.
복제를 하는 방법은 보통 2가지를 권장하는데 하나는 복사 생성자를 이용하는 것이고 다른 하나는 clone 이라는 메소드를 만들어서 넘겨주는 것 입니다.
=>생성자 중에서 자신의 자료형을 매개변수로 받는 생성자가 있으면 이것은 복사 생성자이며 java에서 clone 메소드는 현재 인스턴스를 복제해서 새로운 인스턴스를 만들어서 리턴하는 메소드입니다.

1)main 메소드에 작성해서 참조형 변수 사이의 대입 확인
		//하나의 인스턴스를 생성하고 내부 데이터 설정
		Member origin = new Member();
		origin.setId("ggangpae1");
		origin.setPw("100100100");
		
		//참조형 사이의 대입
		//origin이 가리키고 있는 인스턴스를 weak도 가리킵니다.
		Member weak = origin;
		
		//weak가 id를 변경했는데 origin 것도 변경
		weak.setId("itggangpae");
		System.out.println(weak.getId());
		System.out.println(origin.getId());

2)동일한 값을 갖는 인스턴스를 사용하고자 할 때 복제해서 사용하는 것을 권장
이 복제하는 것을 다른 말로 Deep Copy 라고 합니다.

3)Member 클래스에 복사 생성자를 추가하거나 clone 메소드 추가
=>복사 생성자는 자신과 동일한 자료형의 매개변수를 갖는 생성자를 만들고 그 안에서 데이터를 전부 복사해서 리턴하도록 만들어주면 됩니다.
=>이러한 일을 해주는 메소드를 만들 때는 이름을 clone으로 만드는 것을 권장

=>Member 클래스에 추가
	//인스턴스를 복제해주는 메소드
	public Member clone() {
		//인스턴스를 생성
		Member other = new Member();
		//데이터를 복제
		//원래 참조형 데이터도 clone 해 주어야 하지만 String 은 예외
		other.id = this.id;
		other.pw = this.pw;
		
		//복제된 데이터를 갖는 객체를 리턴
		return other;
	}

=>main 메소드에 코드를 작성하고 확인
System.out.println("============================");
		//origin을 복제해서 대입
		Member deep = origin.clone();
		//현재는 내용이 같습니다.
		System.out.println(deep.getId());
		System.out.println(origin.getId());
		
		//복제를 해서 deep 에 대입해주었기 때문에 변경하기 전에는 같은 내용을 같지만
		//한쪽에서 내용을 변경해도 다른쪽에는 영향이 없기 때문에 deep의 내용을 변경해도 origin은 그대로
		System.out.println("============================");
		deep.setId("choongang");
		System.out.println(deep.getId());
		System.out.println(origin.getId());

11.Java 에서의 메모리 정리
=>heap 에 만들어진 데이터는 프로그램 실행 도중 메모리 정리를 할 수 있는데 Java에서는 가리키고 있는  변수가 없으면 정리 대상이 되고 시스템이 필요한 시점에 Garbage Collection을 호출해서 정리를 합니다.
=>강제로 메모리 정리를 시키고 싶다면 참조형 변수에 null을 대입해서 정리 대상이 되도록 할 수 있습니다.
=>참조형 사이의 변수 대입을 하게되면 변수에 null을 대입해도 메모리 정리가 안 될 수 있습니다.

Member origin = new Member();
Member weak = origin;
origin = null; //null을 대입해도 메모리 정리 대상이 안됩니다.
weak = null; //이것까지 해주어야만 메모리 정리가 됩니다.

=>참조형 변수의 데이터를 다른 참조형에 대입하는 경우는 메소드 안에서 만들어진 참조형 데이터를 외부에서 사용하기 위해서 외부변수에 대입하는 경우가 대부분

**게시판 작업
1.클래스 구성
1)게시판 데이터 1개를 저장할 클래스(글번호, 제목, 내용)

2)게시판 작업을 위한 클래스
=>게시판 전체 목록을 리턴하는 메소드
=>글 번호를 받아서 글 번호에 해당하는 데이터 1개를 리턴하는 메소드
=>게시판 데이터를 매개변수로 받아서 저장하는 메소드
=>게시판 데이터를 매개변수로 받아서 수정하는 메소드
=>글 번호를 받아서 글 번호에 해당하는 데이터를 삭제하는 메소드

이러한 5가지 작업을 CRUD(Create, Read, Update, Delete)라고 합니다.

3)실행 클래스(나중에는 UI를 담당하는 부분(View)과 이벤트를 처리하는 부분(EventHandler , Controller)으로 분할)

2.게시판 데이터를 저장할 클래스를 생성
=>글번호, 제목, 내용을 저장하는 클래스
=>글번호는 1번부터 순서대로 자동으로 생성
=>출력하는 메소드에 인스턴스를 대입하면 인스턴스의 내용을 출력해주도록 하는 메소드

public class Board {
	//저장할 항목을 private 변수로 생성
	//글번호, 제목, 내용
	private int num;
	private String title;
	private String content;
	
	//인스턴스 변수 사용을 위한 접근자 메소드
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	
	//디버깅을 위한 메소드
	//출력하는 메소드에 인스턴스를 대입했을 때 호출되는 메소드
	//자바는 인스턴스를 출력하는 메소드에 대입하면 toString 이라는 메소드가 호출됩니다.
	//인스턴스 변수의 값을 전부 확인하고자 할 때  일일이 get 메소드를 부르는 것은 코드의 낭비
	//이런 경우에는 toString()을 호출해서 한번에 확인
	@Override
	public String toString() {
		return "Board [num=" + num + ", title=" + title + ", content=" + content + "]";
	}
}


3.Java  단위 테스트
=>Java Application을 실행할려면 main 메소드를 갖는 클래스가 필요
=>Java Web Application을 실행할려면 WAS 가 필요
=>부분적으로 로직을 만들고 로직을 테스트하기 위해서 main을 만드는 것이나 WAS를 이용해서 실행하는 것은 자원의 낭비
=>Java 로직을 테스트하기 위한 라이브러리가 이클립스에서 제공되는데 이름은 JUnit
=>JUnit 라이브러리를 추가하고 클래스를 만든 후 메소드 위에 @Test라고만 붙이면 단위 테스트가 가능

1)JUnit 라이브러리를 프로젝트에 추가(Java 버전 변경도 동일한 메뉴)
=>프로젝트 선택하고 마우스 오른쪽을 클릭하고 [Build Path] - [Configure Build Path]를 선택
=>Libraries 탭에서 [add library] 버튼을 클릭하고 JUnit을 선택
=>4나 5 버전을 선택하고 Apply

2)테스트를 위한 클래스를 생성 - 클래스이름은 Test 만 아니면 됩니다.
public class BoardTest {

	//테스트 메소드 만들기
	@Test
	public void testMethod() {
		Board board = new Board();
		System.out.println(board);
	}
	
}

3)테스트를 할 때는 클래스 내부 아무곳에나 커서를 두고 마우스 오른쪽을 클릭하고 [Run As] - [JUnit Test]를 클릭하면 됩니다.
현재 결과는 num=0 title=null content=null로 출력

4.static 변수와 생성자를 이용해서 num의 값을 일련번호로 대입
=>static 변수는 1번 만들어지면 소멸되지 않고 계속 사용할 수 있습니다.
=>instance 변수는 instance가 생성될 때 마다 별도로 생성됩니다.
=>Board 클래스에 코드를 작성하고 Test 메소드를 수정한 후 확인

1)Board 클래스에 코드 추가
//일련번호 생성을 위한 static 변수를 1개 생성
private static int sequence;

//생성자
public Board() {
	//static 변수는 이전에 수정한 내용을 가지고 있기 때문에 1씩 증가
	sequence = sequence + 1;
	//num은 인스턴스 변수라서 생성자를 호출할 때 마다 매번 새로 생성
	//새로 생성되는 num에 sequence의 값을 대입하면 일련번호가 됩니다.
	num = sequence;
}

2)Test 메소드 수정하고 실행
//테스트 메소드 만들기
@Test
public void testMethod() {
	Board board = new Board();
	System.out.println(board);
		
	Board board1 = new Board();
	System.out.println(board1);
}

5.작업을 위한 클래스 - BoardService 
//게시판 작업을 위한 메소드
public class BoardService {
	//Board 100개를 저장할 수 있는 공간을 100개 생성해서 이름을 list라고 붙임
	Board [] list = new Board[100];

	//전체 목록이나 일부 목록을 리턴하는 메소드
	//리턴 타입은 배열이나 List
	//일부 목록을 가져올 때는 매개변수로 페이지 번호를 갖는 경우가 많습니다.
	public Board[] getList() {
		return list;
	}
	
	//페이지 번호에 해당하는 데이터를 가져오는 메소드
	public Board[] getList(int pageNo) {
		Board [] r = new Board[10];
		//한 페이지에 10개씩 있다고 가정
		//pageNo가 1일 때는 0과 9, pageNo가 2일 때는 10과 19
		int start = (pageNo-1) * 10;
		int end =pageNo * 10 - 1;
		
		for(int i=0; i<10; i=i+1) {
			r[i] = list[start + i];
		}
		return r;
	}
	
	//글번호에 해당하는 데이터를 1개 가져오는 메소드
	//기본키를 매개변수로 받아서 처리
	//상세보기를 처리하는 메소드
	public Board getBoard(int num) {
		//list에서 num이라는 글번호를 가진 데이터를 찾아서 리턴
		Board board = null;
		
		//list를 순회하면서 num 과 같은 글번호를 가진 데이터를 board 에 대입
		for(Board temp : list) {
			if(temp != null) {
				//동일한 글번호를 찾으면 더 이상 반복문을 수행할 필요가 없어서 break
				if(temp.getNum() == num) {
					board = temp;
					break;
				}
			}
		}
		//동일한 글번호가 없으면 null을 리턴
		return board;
	}
	
	//글쓰기를 처리하는 메소드
	//데이터 삽입을 처리하는 메소드
	//수행 결과를 알려주고자 할 때는 boolean 이나 int 로 리턴
	//수행 결과를 알려주지 않고자 할 때는 void(실패는 없다라는 가정)
	//매개변수는 데이터 1개
	
	//현재 작성된 글의 개수를 저장하기 위한 변수 - List를 사용하게 되면 필요없음
	private int cnt;
	public boolean insertBoard(Board board) {
		//맨 마지막 위치에 데이터를 대입
		list[cnt] = board;
		cnt = cnt + 1;
		return true;
	}
	
	//글 수정을 처리하는 메소드
	//리턴 타입은 삽입과 동일
	//매개변수도 삽입과 동일
	//수정을 할 때는 기본키(글번호)의 값이 자동으로 설정되는 것이 다릅니다.
	public boolean updateBoard(Board board) {
		//글번호에 해당하는 데이터를 찾아서 데이터를 찾으면 board로 대체
		for(int i=0; i<cnt; i=i+1) {
			Board imsi = list[i];
			//글번호 비교
			if(imsi != null) {
				if(imsi.getNum() == board.getNum()) {
					list[i] = board;
					break;
				}
			}
		}
		
		return true;
	}
	
	//삭제를 처리하는 메소드
	//삭제를 할 때는 데이터 전체가 필요하지 않고 일반적으로 기본키만 필요합니다.
	public boolean deleteBoard(int num) {
		//list에 모든 데이터를 순회해서 글번호가 num 인 데이터를 찾아서 그 위치에 null을 대입
		for(int i=0; i<cnt; i=i+1) {
			Board imsi = list[i];
			//글번호 비교
			if(imsi != null) {
				if(imsi.getNum() == num) {
					list[i] = null;
					break;
				}
			}
		}
		return true;
	}
}

6.실행 클래스를 만들어서 실행
=>main 메소드를 소유한 클래스를 생성









