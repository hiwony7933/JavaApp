**Data Type
1.Overflow & Underflow
1)Overflow: 숫자 자료형에서 자신이 저장할 수 있는 크기보다 큰 데이터를 강제 형 변환해서 데이터를 저장하는 경우 자신이 저장할 수 범위까지의 데이터만 저장하고 앞쪽의 데이터는 제거하고 저장하는 경우

short: 2byte 정수로 -32768 ~ +32767 범위 내의 숫자만 저장 가능
short s = 32768; //이 구문은 에러 
32768 -> 0 10000000 00000000
표현범위가 큰 데이터를 작은 범위의 변수에 저장하기 위해서는 강제 형 변환이 필요
short s = (short)32768;
short s = 10000000 00000000(2진수);

System.out.println("s:" + s); //-32768

자신이 저장할 수 있는 데이터보다 더 큰 숫자를 저장하면 가장 숫자부터 다시 시작

2)underflow
자신이 저장할 수 있는 숫자보다 더 작은 숫자를 저장하면 가장 큰 숫자부터 다시 시작

3)숫자 데이터의 연산에서 결과 자료형보다 더 크거나 작은 데이터가 나오게 되면 잘못된 결과를 만들 수 있습니다.

4)실습
		//short에 32767 보다 큰 숫자는 그냥은 저장 안됨
		//강제 형 변환을 통해서만 저장됨
		//16비트 앞쪽의 비트는 잘리게 됨 - Overflow
		//가장 작은 숫자부터 다시 시작 - 음수가 저장됨
		//반대되는 현상을 Underflow 라고 합니다.
		short s = (short)32768;

		//저장된 데이터를 출력
		System.out.println("s:" + s);

2.문자열
=>String 이라는 클래스를 이용해서 문자열을 저장
=>문자열을 대입할 때는 클래스에서는 예외적으로 직접 값 대입이 가능
String 변수명 = "문자열"; 의 형태로 생성 가능

=>문자열 과 숫자 데이터 또는 boolean 을 + 연산하게 되면 숫자 데이터와  boolean을 문자열로 변환해서 결합을 합니다.

3.Literal 저장
=>Literal: 사용자가 직접 작성한 데이터
boolean 리터럴: true, false
정수 리터럴: 10(int), 10L(long)
실수 리터럴: 3.2f(float), 3.2(double), 0.314E+001(3.14 -> 0.314 * 10의 1승)
문자 리터럴: 'A'
문자열 리터럴: "ABC", "A"
참조 리터럴: null(가리키는 참조가 없다. 결측치)

=>Literal은 영구적인 영역에 저장
한 번 만들어지면 프로그램이 종료될 때 까지 소멸되지 않습니다.
Literal을 변수에 저장하면 먼저 메모리 영역에서 있는지 찾아보고 찾으면 그 참조를 저장하고 찾지 못하면 Literal을 메모리에 저장하고 그 참조를 저장합니다.

=>자바에서는 변수가 참조하고 있는 영역을 확인하고자 할 때 System.identityHashCode 메소드에 변수를 대입해서 출력해보면 됩니다.

실습: 3개의 정수를 저장할 수 있는 변수를 만들고 2개에는 동일한 값을 저장하고 다른 1개에는 다른 값을 저장한 후 해시코드를 출력

		int a = 10;
		int b = 10;
		int c = 11;
		//a와 b는 동일한 데이터를 저장했기 때문에 해시코드가 동일
		//c는 다른 데이터를 저장했기 때문에 다른 해시코드를 출력
		System.out.println("a:" + System.identityHashCode(a));
		System.out.println("b:" + System.identityHashCode(b));
		System.out.println("c:" + System.identityHashCode(c));

4.System.out.printf
=>서식에 맞춰서 콘솔에 출력해주는 메소드
=>프린터 같은 장비는 GUI(윈도우) 운영체제를 탑재하지 않고 CLI(Command Line Interface) 기반의 운영체제를 탑재하고 있는데 이런 운영체제에 데이터를 출력할 때는 서식을 이용해서 출력을 해야 데이터에 맞춤을 적용해서 출력할 수 있습니다.
=>java 에서는 이 경우 printf 메소드를 이용합니다.

1)사용방법
System.out.printf("서식 나열", 서식에 매핑되는 데이터를 나열);
=>서식은 반드시 %로 시작

2)서식
정수: %d, %i 
실수: %f
문자: %c
문자열: %s
boolean: %b

3)%다음에 숫자를 입력하면 숫자만큼의 자리를 확보해서 출력

4)%0숫자 형태로 입력하면 빈자리는 0으로 채워집니다.

5)실수의 경우 %전체자릿수.소수자릿수f 형태로 출력할 소수 자릿수를 설정할 수 있는데 소수 자릿수 아래에서 반올림

6)String.format 가 사용방법이 동일
String.format은 출력하지 않고 문자열로 리턴합니다.

int age = 20;
double height = 176.53;
System.out.printf("나이는 %d 키는 %.1f 입니다.", age, height);

**연산자(Operator)
=>연산을 수행하기 위한 부호나 명령어
=>산술연산은 숫자 데이터의 연산이고 논리연산은 결과가 true 나 false 형태로 리턴되는 연산
1.최우선 연산자
1)( ): 연산의 우선순위 변경을 위한 연산자
2)[ ]: 배열에서 배열의 크기나 인덱스를 설정할 때 사용하는 연산자

2.단항 연산자 : 하나의 데이터만을 가지고 연산하는 연산자 - 

1)증감 연산자: ++, --
=>변수에만 사용할 수 있는 연산자
=>변수의 앞 뒤 모두에 위치 할 수 있는 연산자
=>변수의 앞에 놓이게 되면 변수의 값을 1증감시키고 명령에 사용
=>변수의 뒤에 놓이게 되면 변수의 값을 명령에 사용하고 1증감시킵니다.
=>연속해서 사용되는 경우 언어마다 다르게 적용

		int a = 10;
		//a의 값을 1증가
		a++;
		System.out.println("a:" + a); //11 출력
		
		//a가 11인 상태에서 명령에 먼저 사용하고 1증가
		//11이 출력되고 a는 12가 됩니다.
		System.out.println("a:" + (a++)); //11
		
		//a를 먼저 증가시켜서 13을 만들고 명령에 사용
		System.out.println("a:" + (++a));//13

2)부호 관련 연산자
+: 양수라는 것을 명시적으로 표현하기 위한 연산자
-: 2의 보수 연산자 - 음수 표현
~: 1의 보수(0->1, 1->0) 연산자 - 양수와 음수사이의 절대값 1차이, 색상 반전에 이용

3)강제 형 변환 연산자
(자료형)데이터 : 데이터의 자료형을 강제로 변경하는 연산자

3.산술 연산자
%, *, /, +, -
=>자바는 동일한 자료형끼리 산술 연산을 하면 동일한 자료형으로 결과가 리턴
정수 / 정수 = 정수

=>서로 다른 자료형끼리 산술 연산을 하면 표현 범위가 더 큰 자료형으로 변환해서 연산하고 표현 범위가 더 큰 자료형으로 결과를 리턴
정수 + 실수 => 실수 + 실수 = 실수

=>int 보다 작은 자료형은 int 로 변환해서 수행하고 결과도 최소 int
short + short => int + int = int

=>문자열은 문자열 또는 숫자, 그리고 boolean 데이터와 + 연산이 가능한데 + 연산을 하게되면 다른 데이터를 문자열로 변환해서 결합

"10+20=" + 10 + 20 => "10+20=1020"
"10+20=" + (10 + 20) => "10+20=30

=>%: 나머지 연산자
숫자의 범위를 제한하거나 패턴을 갖는 문장을 실행할 때 사용

실습)패턴을 갖는 명령문을 실행
//빨강, 파랑, 노랑 을 순서대로 1초마다 출력
		
		int i = 0;
		for(;;) {
			try {
				i = i % 4;
				if(i==0) 
					System.out.println("라투");
				else if(i==1)
					System.out.println("오미크론");
				else if(i==2)
					System.out.println("다크스펙터");
				else
					System.out.println("오미크론");
				Thread.sleep(1000);
				i++;
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}


=>cd key 나 숫자 코드의 유효성 검사에도 %가 사용됩니다.

4.shift 연산자
=>정수 데이터를 가지고 왼쪽이나 오른쪽으로 비트 단위로 밀어내는 연산자
=>2진수로 연산하고 결과는 10진수로 리턴
=> >> , <<, >>>

정수1 >> 정수2 : 정수1을 정수2 비트만큼 오른쪽으로 shift
정수1 << 정수2 : 정수1을 정수2 비트만큼 왼쪽으로 shift
=>부호비트는 shift 하지 않습니다.
첫번째 비트는 shift 하지 않습니다.

정수1 >>> 정수2 : 부호비트도 shift, 양수 일 때는 >> 와 차이가 없고 음수인 경우 결과가 달라짐

=>32번 이상 shift 하라고 작성하면 32로 나눈 나머지 만큼만 shift 합니다.

=>오른쪽으로 한 번 shift 하면 2로 나눈 효과
=>왼쪽으로 한 번 shift 하면 2를 곱한 효과

4: 0000 0100

4>>1 : 0000 0010  -> 2
4>>2 : 0000 0001 -> 1

5 / 2 : 0000 0010 -> 2

실습)
		int n = 10;
		//2번을 오른쪽으로 밀면 나누기 4한 효과 - 2가 출력
		System.out.println("n >> 2:" + (n >> 2)); 
		//32번 이상 밀면 모든 비트가 소멸되기 때문에 
		//32번 이상 shift 하면 32로 나눈 나머지 만큼만 shift - 2번만 함
		System.out.println("n >> 34:" + (n >> 34)); 

5.옵션 설정
=>프로그래밍 언어에서는 사용할 수 있는 옵션을 정수로 만들어 놓는 경우가 종종 있는데 이 때 숫자의 배열을 확인
=>숫자의 배열이 1, 2, 3, 4, 5 처럼 일련번호 형태로 되어 있으면 이 옵션은 하나 만 선택
=>숫자의 배열이 1, 2, 4, 8, 16, 32 처럼 2의 지수 승 형태로 되어 있으면 이 옵션은 중복 선택이 가능한 옵션입니다.
애플은 1, 2, 4, 8 이런 식으로 쓰지 않고 1<<0, 1<<1, 1<<2, 1<<3 형태로 만듭니다. 

=>키보드 눌렀을 때 
A:65, B:66, C:67...

마우스 왼쪽:1 마우스 오른쪽: 2, Shift:4, Control:8, Middle Button: 16, Alt: 32...

6.관계 연산자
=>2개의 데이터를 비교해서 결과를 boolean 리턴하는 연산자
=>숫자형에만 사용 가능한 연산자: >, >=, <, <=
=>모든 자료형에서 사용 가능한 연산자(내용을 비교하는 것이 아니고 가리키고 있는 데이터가 같은지 비교): !=, ==
=>문자열의 경우는 동일한 데이터이더라도 == 로 비교하면 false가 리턴될 수 있기 때문에 문자열은 ==로 비교하지 않습니다.

7.비트 논리 연산자
=>정수 데이터에 사용 가능한 연산자로 비트 단위로 연산한 후 결과를 10진 정수로 리턴하는 연산자
=>&(and): 2개의 비트 모두 1일 때 만 1
=>|(or): 2개의 비트 모두 0일 때 만 0
=>^(xor): 2개의 비트가 같으면 0 다르면 1
=>이 연산자들은 시스템 프로그래밍이나 그래픽 프로그래밍을 할 때 자주 등장

		int a = 20;//00000000 00000000 00000000 00010100
		int b = 13;//00000000 00000000 00000000 00001101
		
		//2개 모두 1인 경우에만 1
		System.out.println("a&b:" + (a&b)); //결과는 100 -> 4
		//2개 모두 0인 경우에만 0 나머지 경우는 1
		System.out.println("a|b:" + (a|b)); //결과는 11101 -> 29
		//2개 같은 경우는 0 다른 경우는 1
		System.out.println("a^b:" + (a^b)); //결과는 11001 -> 25

8.조건 논리 연산자
=>boolean 데이터를 가지고 연산을 수행
=>!(NOT): 하나의 데이터를 가지고 연산하는데 결과를 반대로 리턴하는 연산자
=>&&(AND): 둘 다 true 인 경우만 true를 리턴하고 그 이외의 경우는 false 리턴
=>||(OR): 둘 다 false 인 경우만 false를 리턴하고 그 이외의 경우는 true 리턴

=>and 와 or는 데이터의 순서를 바꿔도 실행 결과는 같지만 과정은 다를 수 있습니다.
and는 앞 쪽의 데이터가 false 이면 결과가 무조건 false 이므로 뒤의 데이터를 확인하지 않습니다.

or는 앞 쪽의 데이터가 true이면 결과가 무조건 true 이므로 뒤의 데이터를 확인하지 않습니다.

순서에 따라 뒤의 데이터를 확인해야 하기도 하고 확인하지 않아도 되기 때문에 과정이 달라질 수 있습니다.
반복문 안에서 사용할 때는 조금 생각해보고 사용하는 것이 좋습니다.

실습)
int a = 10;
		//a>5 true && a++ > 10
		boolean result = a > 5 && (a++ > 10);
		System.out.println("결과:" + result);
		System.out.println("a:" + a);
		
		//a<5 false
		//앞의 문장이 거짓이어서 뒤의 문장을 수행하지 않기 때문에 a의 값은 증가하지 않음
		result = a < 5 && (a++ > 10);
		System.out.println("결과:" + result);
		System.out.println("a:" + a);

연습)
		int x = 10;
		//x가 4의 배수인지 판별 - 4로 나누어 떨어지면 4의 배수
		boolean result = x % 4 == 0;
		System.out.println("result:" + result);
		
		int year = 2020;
		//윤년인지 판별
		//윤년은 4의배수이고 100의 배수가 아닌 경우 또는 400의 배수인 경우
		result = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
		System.out.println("result:" + result);

9.삼항 연산자
변수 = boolean이 나오는 표현식 ? true일 때 수행할 내용 : false 일 때 수행할 내용;

=>2개의 정수가 있다고 할 때 2개 중에 큰 정수 찾기
int a = 10;
int b = 20;
int max = a > b ? a : b;
System.out.println("max:" + max);

=>간단한 분기문을 만들 때는 if 대신에 삼항 연산자를 사용합니다.
삼항 연산자로 작성하는 모든 식은 if로 대신할 수 있습니다.

10.대입연산자
= : 오른쪽의 데이터를 왼쪽의 변수에 대입하기 위한 연산자
연산자= : 왼쪽의 변수가 가리키는 데이터에 오른쪽의 데이터를 연산자를 이용해서 연산하고 다시 왼쪽의 변수에 결과를 대입하는 연산

int a = 10;

a += 20;  //a의 값인 10 + 20을 하고 그 결과를 다시 a에 저장
//a의 값은 30
//+ 대신에 다른 연산자들도 사용이 가능

11. 변수의 값을 1증가
a = a + 1;
a += 1;
a++;

예전에는 a++이 가장 빠르다고 했는데 실제로 비교를 해보면 몇 억번 정도 수행해도 별차이가 없음

a = a + 1 방식은 모든 프로그래밍언어에서 사용이 가능
+=, ++ 는 되는 언어가 있고 안되는 언어도 있습니다.

12.연습문제
int second = 309209;
//second에 초가 저장
//하루는 86400 초, 1시간은 3600초, 1분은 60초
//second 가 몇일 몇시간 몇분 몇초인지 출력

int day = second / 86400;
int hour = (second - (day * 86400))/3600;
int minute = (second - (day * 86400) - (hour * 3600))/60;
//초는 분까지 가져간 것을 모두 빼면 되는데 일, 시간, 분은 전부 60의 배수이기 때문에
//60으로 나눈 나머지가 모두 뺀 값이 됩니다.
int sec = second % 60;

System.out.println(day + "일 " + hour +"시간 " + minute + "분 " + sec +"초");

13.자바에서 콘솔에서 입력받기
Scanner sc = new Scanner();
//Scanner는 java.util.Scanner 라서 그냥 Scanner라고 쓰면 에러가 나는데 
//Scanner 글자에 마우스 커서를 갖다 대면 import를 대신 해준다고 메시지가 출력됩니다.
//클릭하면 import를 해줍니다.

//문자열을 입력받고자 하면
문자열변수 = sc.nextLine();

//정수 입력받고자 하면 
정수변수 = sc.nextInt();

실습)
이름과 나이를 입력받아서 출력
이름은 문자열 나이는 정수

//이름과 나이를 입력받아서 출력하기
		Scanner sc = new Scanner(System.in);
		//이름을 입력받기
		System.out.print("이름입력:");
		String name = sc.nextLine();
		//나이를 입력받기
		System.out.print("나이입력:");
		int age = sc.nextInt();
		
		//출력
		System.out.println("이름은 " + name + " 나이는 " + age);
		
		sc.close();

14.제어문자
=>역슬래시 다음에 하나의 영문 문자를 기재해서 특별한 기능을 수행하도록 한 문자
\n: 줄 바꿈
\t: 탭
\\: 역슬래시
\': '
\": "

\a: 비프음 - C 언어에서는 메인보드 내의 스피커를 이용해서 beep 음 출력
윈도우 프로그래밍을 하다가 버튼의 제목 같은 곳에서 줄바꿈을 할려고 했는데 \n으로 안되면 \r\n 을 이용

**제어문(Control Statement)
=>프로그램의 흐름을 변경하는 명령어
=>프로그램은 왼쪽에서 오른쪽으로 위에서 아래로 순서대로 처리되는데 이러한 흐름을 변경하는 명령어
1.종류
1)분기문
=>조건이나 값을 가지고 분기(갈림길)
if 와 switch

2)반복문(Loop)
=>동일한 패턴의 문장을 반복 수행
while, do~while, for

3)기타 제어문
break, continue, return

2.if
1)단순 if
if(boolean 데이터 또는 boolean이 리턴되는 표현식 또는 메소드 호출){
	() 안의 내용이 true일 때 수행할 내용
}

2)if ~ else
if(boolean 데이터 또는 boolean이 리턴되는 표현식 또는 메소드 호출){
	() 안의 내용이 true일 때 수행할 내용
}else{
	() 안의 내용이 false일 때 수행할 내용
}

3)if ~ else if ~ else
if(boolean 데이터 또는 boolean이 리턴되는 표현식 또는 메소드 호출){
	() 안의 내용이 true일 때 수행할 내용
}else if(새로운 비교 내용){
	앞의 조건이 false 이고 ()안의 조건이 true 일 때 수행할 내용
}else{
	() 안의 내용이 false일 때 수행할 내용
}
=>else if는 무제한 사용이 가능
=>else는 생략이 가능

실습1)
=>점수를 입력받아서 60점이 넘으면 합격이라고 출력하기
//키보드로부터 입력받기 위한 객체를 생성
		Scanner sc = new Scanner(System.in);
		//점수 입력받기
		System.out.print("점수 입력:");
		int score = sc.nextInt();
		
		//점수가 60이상이면 합격이라고 출력
		if(score >= 60){
			System.out.println("합격");
		}
	
		sc.close();

실습2)점수가 60이상이면 합격 아니면 불합격
		// 키보드로부터 입력받기 위한 객체를 생성
		Scanner sc = new Scanner(System.in);
		// 점수 입력받기
		System.out.print("점수 입력:");
		int score = sc.nextInt();

		// 점수가 60이상이면 합격 아니면 불합격 이라고 출력
		if(score >= 60) {
			System.out.println("합격");
		}else {
			System.out.println("불합격");
		}
		sc.close();

실습3)
90 - 100 이면 A
80 - 90미만이면 B
70 - 80미만이면 C
60 - 70미만이면 D
0 - 60미만이면 F
=>자바는 위의 조건이 아래 조건을 포함하면 에러가 발생
=>결코 도달할 수 없는 코드를 만들면 에러가 발생
=>이런 경우 else 의 용도 ?
// 키보드로부터 입력받기 위한 객체를 생성
		Scanner sc = new Scanner(System.in);
		// 점수 입력받기
		System.out.print("점수 입력:");
		int score = sc.nextInt();

		// 점수가 90-100 사이이면 A, 80-90미만이면 B
		// 점수가 70-80미만이면 C, 60-70미만이면 D
		// 점수가 0-60미만이면 F 라고 출력
		if(score >= 90 && score <= 100) {
			System.out.println("A");
		}else if(score >= 80 && score < 90) {
			System.out.println("B");
		}else if(score >= 70 && score < 80) {
			System.out.println("C");
		}else if(score >= 60 && score < 70) {
			System.out.println("D");
		}else if(score >= 0 && score < 60){
			System.out.println("F");
		}else {
			System.out.println("잘못된 점수 입력");
		}
		//else는 예외적인 상황 발생에 대한 처리를 해주는 것이 좋습니다.
		

		sc.close();

3.switch
=>값에 의한 분기
switch(정수나 문자열 변수 또는 연산식 그리고 메소드 호출){
	case 값1:
		( )안의 내용이 값1일 때 수행할 내용;
		(break;)
	case 값2:
		( )안의 내용이 값2일 때 수행할 내용;
		(break;)
	...
	default:
		일치하는 값이 없을 때 수행할 내용;
		(break;)
} 

=>문자열은 자바 1.7 버전부터 지원
=>case 옆에 작성하는 값은 리터럴이거나 final 변수이어야 합니다.
변수를 만들 때 자료형 앞에 final을 기재하면 자바에서는 읽기 전용 변수(상수)가 됩니다.
=>case 구문안에서 break를 생략하면 break를 만날 때 까지 모든 문장을 전부 수행

실습)
정수를 1개 입력받아서 1이면 한식 2이면 중식 3이면 분식 나머지 경우는 일식이라고 출력
값을 가지고 분기하는 경우인데 if 로 작성이 가능하지만 값에 따라 다른 문장을 실행할 때는 switch를 사용하는 것을 권장

// 키보드로부터 입력받기 위한 객체를 생성
		Scanner sc = new Scanner(System.in);
		// 메뉴 입력받기
		System.out.print("메뉴 입력(1-한식 2-중식 3-분식 기타-일식):");
		int menu = sc.nextInt();
		
		//읽기 전용의 변수를 생성
		final int KOREA = 1;
		final int CHINA = 2;
		final int SNACKBAR = 3;
		
		switch(menu) {
		case KOREA:
			System.out.println("한식");
			break;
		case CHINA:
			System.out.println("중식");
			break;
		case SNACKBAR:
			System.out.println("분식");
			break;
		default:
			System.out.println("일식");
			break;
		}

		sc.close();

4.반복문
=>패턴을 갖는 문장을 연속적으로 사용해야 하는 경우 반복문을 사용할 수 있습니다.
1)while
while(boolean 데이터 또는 boolean이 리턴되는 연산식 또는 메소드 호출){
	( )의 값이 false가 아닐 때 수행할 내용;
}

//Hello Java 를 3번 출력
System.out.println("Hello Java");
System.out.println("Hello Java");
System.out.println("Hello Java");

int i = 0;
while(i<3){
	System.out.println("Hello Java");
	i = i + 1;
}

2)do ~ while
do{
	반복 수행할 내용;
}while(조건);
=>무조건 반복 수행할 내용을 하고 조건을 확인해서 false가 { }안의 내용을 반복
=>do ~ while을 while 로 변경할 수 있지만 반드시 1번은 수행해야 한다 라는 의미를 전달하기 위해서 사용

i = 0;
do{
	System.out.println("Hello Java");
	i = i + 1;
}while(i<3);

3)for
for(처음 한번만 수행할 내용; 조건; 두번째 부터 수행할 내용){
	조건이 false가 아니라면 수행할 내용;
}
=>각 영역은 생략이 가능
for(int i=0; i<3; i=i+1){
	System.out.println("Hello Java");
}

int i=0;
for( ; i<3; i=i+1){
	System.out.println("Hello Java");
}

for(int i=0, int j=0 ; i<3; i=i+1){
	System.out.println("Hello Java");
}

4.제어문을 사용할 때 주의 할 점
if 나 switch, while, for를 쓸 때 주의할 점은 ( ) 뒤에 ;을 하는 것입니다.
( ) 뒤에 ;을 하게 되면 조건은 무시되고 { }안의 내용을 무조건 한 번만 수행합니다.

실습 - 반복문 : Hello Java를 3번씩 출력하기
		//while은
		//한번만 수행할 내용 -> while(조건) -> { }내에 반복수행할 내용 
		int i = 0;
		while(i<3){
			System.out.println("Hello Java");
			i = i + 1;
		}
		System.out.println("======================");
		//do~while은
		//한번만 수행할 내용 -> do{반복 수행할 내용} -> while(조건);
		i = 0;
		do {
			System.out.println("Hello Java");
			i = i + 1;
		}while(i<3);
		System.out.println("======================");
		//for
		//for(한번만 수행할 내용; 조건; 두번째부터 수행할 내용){반복 수행할 내용}
		for(i=0; i<3; i=i+1) {
			System.out.println("Hello Java");
		}

**java application을 git hub에 올리고 내려받기 그리고 업데이트
1.올리기
1)git hub 사이트에서 repository를 1개 생성하고 URL을 복사

2)Eclipse에서 git perspective를 엽니다.
[window] - [perspective] - [open perspective] - [git]

3)Clone a git repository를 클릭하고 복사한 URL을 URI 란에 입력하고 NEXT 를 눌러서 마침
=>화면에 repository 가 생성 

4)화면을 자바 작업 화면으로 변경

5)업로드 하고 싶은 프로젝트를 선택하고 마우스 오른쪽을 클릭 한 후 [team] - [share project]를 선택

6)대화상자에서 업로드 하고 싶은 repository를 선택하고 finish
현재 프로젝트를 local에 있는 git 과 연결한 것임

7)프로젝트 git hub 사이트에 업로드
프로젝트를 선택하고 마우스 오른쪽을 클릭하고 [team] - [commit]
대화상자에서 변경된 파일들을 아래로 드래그
Message를 작성하고 commit and push 클릭하면 git hub에 업로드
commit을 누르면 로컬에만 반영 







